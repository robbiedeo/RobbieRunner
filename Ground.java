package gui;

import visual.dynamic.described.RuleBasedSprite;
import visual.statik.TransformableContent;

/**
 * The Ground class.
 * 
 * @author Robbie Deonarain
 *
 */
public class Ground extends RuleBasedSprite
{
  private static final int INITIAL_LOCATION = 250;
  protected double initialSpeed, maxX, maxY, speed, x, y;
  protected int lastTime, millisPerState, state, stateChange;
  protected int timeInState;

  /**
   * The ground constructor.
   * 
   * @param content
   *          the content to use
   * @param width
   *          the width
   * @param height
   *          the height
   * @param speed
   *          the speed
   */
  public Ground(final TransformableContent content, final double width, final double height,
      final double speed)
  {
    super(content);
    // Rectangle2D bounds;
    //
    // bounds = content.getBounds2D(false);
    // top = (width - bounds.getHeight() - 34);
    // left = (height - bounds.getWidth())/2.0;

    maxX = width;
    maxY = height;

    x = 0;
    y = maxY;

    this.initialSpeed = speed;
    this.speed = speed;
  }

  /**
   * Handle a tick event (generated by the Stage).
   *
   * @param time
   *          The current time (which is not used)
   */
  public void handleTick(final int time)
  {
    updateLocation();
  }

  /**
   * Update the location.
   */
  protected void updateLocation()
  {
    x -= speed;

    if (x < -1280)
    {
      x = 0;
      y = INITIAL_LOCATION;
    }
    setLocation(x, y);
  }

}
